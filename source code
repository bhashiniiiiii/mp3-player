package
{
    import flash.display.MovieClip;
    import flash.events.Event;
    import flash.events.EventDispatcher;
    import flash.events.IOErrorEvent;
    import flash.events.MouseEvent;
    import flash.events.ProgressEvent;
    import flash.events.TimerEvent;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.media.ID3Info;
    import flash.net.URLRequest;
    import flash.utils.Timer;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import caurina.transitions.Tweener;
     
    public class SimpleMP3Player extends MovieClip
    {
        // Create some variables that we need
        private var mp3File:Sound;
        private var mp3FilePosition:SoundChannel;
        private var id3Data:ID3Info;
        private var id3InfoAvailable = false;
         
        private var updateTime:Timer;
         
        private var playingSound:Boolean = false;
        private var soundPosition:Number;
        private var songReachedEnd:Boolean = false;
         
        private var buttonPos:Array = new Array('0', '-36', '-72', '-108', '-144', '-180', '-216', '-252');
         
        public function SimpleMP3Player()
        {   
            display.playerTexts.x = -73;
            display.mask = displayMask;
             
            bs.buttons.buttonMode = bs.buttons.enabled = false;
            bs.buttons.y = buttonPos[3];
             
            loadMP3();
        }
         
        private function loadMP3():void
        {
            mp3File = new Sound();
            mp3File.addEventListener(ProgressEvent.PROGRESS, mp3FileLoading);
            mp3File.addEventListener(Event.COMPLETE, mp3FileLoaded);
            mp3File.addEventListener(IOErrorEvent.IO_ERROR, errorLoadingSound);
             
            mp3File.addEventListener(Event.ID3, getID3Data);
            mp3File.load(new URLRequest('tarzan.mp3'));
             
            Tweener.addTween(display.preloader, {x: 96, time:1});
        }
         
        private function mp3FileLoading(e:ProgressEvent):void
        {
            var currentPercent:Number = Math.round(e.bytesLoaded / e.bytesTotal * 100);
            display.preloader.text = 'LOADING...' + currentPercent + '%';
             
            if (currentPercent > 50 && id3InfoAvailable)
            {
                Tweener.addTween(display.preloader, {x: 200, time:1, onComplete:playMP3, onCompleteParams:[false, 0]});
                mp3File.removeEventListener(ProgressEvent.PROGRESS, mp3FileLoading);
            }
        }
         
        private function mp3FileLoaded(e:Event):void
        {
            mp3File.removeEventListener(Event.COMPLETE, mp3FileLoaded);
            mp3File.removeEventListener(ProgressEvent.PROGRESS, updateBufferField);
            Tweener.addTween(display.playerTexts.buffer, {x: 200, time:1});
        }
         
        private function errorLoadingSound(e:IOErrorEvent):void
        {
            trace('Error loading sound: ' + e);
        }
         
        private function getID3Data(e:Event):void
        {
            id3InfoAvailable = true;
            id3Data = mp3File.id3;
        }
         
        private function playMP3(useSp:Boolean, sp:Number):void
        {   
            if (useSp) mp3FilePosition = mp3File.play(sp);
            else mp3FilePosition = mp3File.play();
             
            playingSound = true;
            mp3FilePosition.addEventListener(Event.SOUND_COMPLETE, songFinished);
            mp3File.addEventListener(ProgressEvent.PROGRESS, updateBufferField);
             
            bs.buttons.buttonMode = bs.buttons.enabled = true;
            bs.buttons.y = buttonPos[0];
             
            bs.buttons.addEventListener(MouseEvent.MOUSE_OVER, mouseOverBs);
            bs.buttons.addEventListener(MouseEvent.MOUSE_OUT, mouseOutBs);
            bs.buttons.addEventListener(MouseEvent.CLICK, mouseClickBs);
                                                 
            updateTime = new Timer(100);
 
            updateTime.addEventListener(TimerEvent.TIMER, getMP3Time);
            updateTime.start();
             
            var si:String = id3Data.artist + ' - ' + id3Data.songName;
            si = si.toUpperCase();
            display.playerTexts.songInfo.autoSize = TextFieldAutoSize.LEFT;
            display.playerTexts.songInfo.wordWrap = false;
            display.playerTexts.songInfo.text = si;
             
            Tweener.addTween(display.playerTexts, {x: 60, time:1});
        }
         
        private function updateBufferField(e:ProgressEvent):void
        {
            var currentPercent:Number = Math.round(e.bytesLoaded / e.bytesTotal * 100);
            display.playerTexts.buffer.text = currentPercent + '%';
        }
         
        private function getMP3Time(e:TimerEvent):void
        {
            var totalMinutes = Math.floor(mp3File.length / 1000 / 60);
            var totalSeconds = Math.floor(mp3File.length / 1000) % 60;
            var currentMinutes = Math.floor(mp3FilePosition.position / 1000 / 60);
            var currentSeconds = Math.floor(mp3FilePosition.position / 1000) % 60;
             
            if (totalSeconds < 10) totalSeconds = '0' + totalSeconds;
            if (currentSeconds < 10) currentSeconds = '0' + currentSeconds;
             
            display.playerTexts.times.text = currentMinutes + ':' + currentSeconds + '/' + totalMinutes + ':' + totalSeconds;
        }
         
        private function songFinished(e:Event):void
        {
            mp3FilePosition.removeEventListener(Event.SOUND_COMPLETE, songFinished);
            updateTime.removeEventListener(TimerEvent.TIMER, getMP3Time);
             
            bs.buttons.y = buttonPos[3];
            mp3FilePosition.stop();
             
            playingSound = false;
            songReachedEnd = true;
             
            soundPosition = 0;
            display.playerTexts.times.text = 'PLAY AGAIN?';
        }
         
        /*
        *   allButtons.bs event methods begin
        */
         
        private function mouseOverBs(e:MouseEvent):void
        {
            if (playingSound) bs.buttons.y = buttonPos[5];
            else bs.buttons.y = buttonPos[1];
             
            if (songReachedEnd && !playingSound) bs.buttons.y = buttonPos[1];
        }
         
        private function mouseOutBs(e:MouseEvent):void
        {   
            if (playingSound) bs.buttons.y = buttonPos[0];
            else bs.buttons.y = buttonPos[4];
             
            if (songReachedEnd && !playingSound) bs.buttons.y = buttonPos[3];
        }
         
        private function mouseClickBs(e:MouseEvent):void
        {
            if (playingSound)
            {
                bs.buttons.y = buttonPos[4];
                soundPosition = mp3FilePosition.position;
                updateTime.stop();
                mp3FilePosition.stop();
                playingSound = false;
                display.playerTexts.times.text = 'PAUSE';
            }
            else if (!playingSound)
            {
                bs.buttons.y = buttonPos[2];
                playMP3(true, soundPosition);
                playingSound = true;
             
            }
            else if (songReachedEnd)
            {
                songReachedEnd = false;
                playMP3(false, 0);
            }
        }
    }
}
